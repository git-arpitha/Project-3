version: 2.1

orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy   back-end and front-end cloudformation stacks  given a  workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
                cd backend
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
      #parameters:
    # Add parameter here
    steps:
      - restore_cache:
          key: v1-backend-build
          
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              # revert migration
              npm run migrations:revert
            fi              
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
              
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test-frontend
          command: |
                cd frontend
                npm install
                npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend      
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: test-backend
          command: |
                cd backend
                npm install
                npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-frontend]
      - run:
           name: scan-frontend
           command: |
               cd frontend
               npm install
               npm install oauth-sign@^0.9.0
      - save_cache:
           paths: [frontend/node_modules]
           key: scan-frontend           
 
              
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-backend]
      - run:
           name: scan-backend
           command: |
                 cd backend
                 npm audit fix --audit-level=critical --force
      - save_cache:
           paths: [backend/node_modules]
           key: scan-backend  

  slack-deploy:
    docker:
      - image: circleci/node:13.8.0

    steps: 
      - checkout
      - run:
          command:  |
                 cd backend
                 npm install
                 npm run build
      - slack/notify:
          channel: C02NRG0H0F9
          event: always
          template: basic_fail_1     
    
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=proj3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=proj3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
             
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                echo "[web]" > .circleci/ansible/inventory.txt
                aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --output text >> .circleci/ansible/inventory.txt
                 cat .circleci/ansible/inventory.txt
      - run:
          name: Save backend URL in memstash
          command: |
              BACKEND_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --output text)
              curl -H "Content-Type: text/plain" -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID}
              echo "EC2_Backend IP: "$BACKEND_IP 
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      - destroy-environment
      
    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
                fingerprints: ["d7:fd:94:12:70:77:34:28:cf:cc:90:77:11:49:c9:2a"]
      - attach_workspace:
                at: ~/
      - run:
              name: Install dependencies
              command: |
                       apk add --no-cache \
                       python3 \
                       py3-pip \
                       && pip3 install --upgrade pip \
                       && pip3 install \
                       awscli \
                       && rm -rf /var/cache/apk/*
                       apk add --update ansible
      - run:
              name: Configure server
              command: |
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
                
      - destroy-environment       
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-build]
      - run:
            name: envts
            command: |
                 cd ./backend
                 sudo apt-get -y -qq update
                 sudo apt-get -y -qq install python3
                 sudo apt-get -qq install awscli
                 sudo npm cache clean -f
                 npm install
                 npm run build
      - run:
            name: envts
            
            command: |
              cd  backend
              touch .env
              echo ENVIROMENT=production > .env
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_CONNECTION=postgres >> .env
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
              echo TYPEORM_HOST=$TYPEORM_HOST >> .env
              echo TYPEORM_PORT=$TYPEORM_PORT >> .env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
              ls -latr
              cat .env
      - run:
            name: Run migrations
            command: |
                 cd backend
                 npm run migrations  > migrationresult.txt
                 cat migrationresult.txt
      - run:
            name: Send migration results to memstash
            command: |
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                   curl -H "Content-Type: text/plain" -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                fi
      - destroy-environment
      
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
            name: Install dependencies
            command: |
              sudo apt-get -y -qq update
              sudo apt-get -qq install awscli
      - attach_workspace:
            at: .
      - run:
            # MUST be http not https
            name: Get backend url
            command: |
              API_IPback=$(curl -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request GET https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID})
              export API_URL=$(echo "http://$API_IPback:3030")
              cd frontend
              echo "${API_URL}" > apiurl.txt
      - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              export API_URL=$(cat apiurl.txt)
              cat apiurl.txt
              npm i
              npm run build
              s3Bucket=$(echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}")
              #s3Bucket=udapeople-kk1j9359gjdf8
              aws s3 sync dist s3://$s3Bucket/
              s3FullUrl=("http://$s3Bucket.s3-website-eu-east-1.amazonaws.com")
              curl -H "Content-Type: text/plain" -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request PUT --data "$s3FullUrl" https://api.memstash.io/values/s3bucket_${CIRCLE_WORKFLOW_ID}
      - persist_to_workspace:
            root: .
            paths:
              - frontend/dist
      - destroy-environment


  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
  # Make sure ubuntu is 20.04 in backend.yml or you will have issues with PM2. read .circleci/backend/files for more info
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - d7:fd:94:12:70:77:34:28:cf:cc:90:77:11:49:c9:2a
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip nodejs npm
            apk add --update openssh-client

      - run:
          name: Compress Backend
          command: |
            [[ ! -d backend ]] && mkdir backend
            myenv="backend/.env"
            echo ENVIROMENT=production > $myenv
            echo NODE_ENV=production >> $myenv
            echo TYPEORM_CONNECTION=postgres >> $myenv
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $myenv
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $myenv
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $myenv
            echo TYPEORM_HOST=$TYPEORM_HOST >> $myenv
            echo TYPEORM_PORT=$TYPEORM_PORT >> $myenv
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $myenv
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $myenv
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $myenv
            cat $myenv
            tar -C backend -czvf artifact.tar.gz .
            ls -la
      - run:
          name: Deploy backend
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False
            pwd
            cat .circleci/ansible/inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

      - destroy-environment
    
  smoke-test:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
            apk add --update tar gzip curl
            apk add --update curl #for slack notify
            apk add --update jq #for slack notify
      - run:
          name: Backend  Smoke test
          command: |
            back_ip=$(curl -H "token:  e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request GET https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID})
            if curl -s "http://$API_IPback:3030/api/status" | grep "ok"
            then
              echo "Backend alive, Proceeding"                      
            else
              exit 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            front_url=$(curl -H "token:  e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request GET https://api.memstash.io/values/s3bucket_${CIRCLE_WORKFLOW_ID})
            if curl -s ${front_url} | grep "Welcome"
            then
              echo "Frontend alive"  
            else
              exit 0
            fi

      
      - destroy-environment
      - revert-migrations
    
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs npm tar gzip jq git
            yum install -y tar gzip
            yum install -y tar gzip curl
            yum install -y nodejs
      - run:
         name: Get old stack workflow id
         command: |          
           OldWorkflowID=$(aws cloudformation \
                 list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text )
           
           curl -H "Content-Type: text/plain" -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request PUT --data "${OldWorkflowID}" https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7}  
           
           echo "OldWorkflowID:  " $OldWorkflowID
           echo "Current WorkFlowID: " $CIRCLE_WORKFLOW_ID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            echo "Update CloudFront"
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople	  
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
            OldWorkflowID=72b6b4d
            curl -H "Content-Type: text/plain" -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request PUT --data "${OldWorkflowID}" https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7}
      
      - run:
          name: Cleanup old stacks and files
          command: |
            # get old WorkFlowId  
            export OldWorkflowID=$(curl -H "token: e0afd09a-8dcc-48bb-b177-4ffcfca02460" --request GET https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7})
            echo "OLD WORKFLOW id: " $OldWorkflowID
            # get all stacks
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo  $STACKS
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then 
              echo "OldWorkFlowID : " ${OldWorkflowID}           
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
      
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
     # -  slack-deploy
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only:
                  - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [ run-migrations ]
      - deploy-frontend:
          requires: [ deploy-backend ]
      - smoke-test:
          requires:
           - deploy-frontend
           - deploy-backend
      - cloudfront-update:
          requires: [ smoke-test ]
      - cleanup:
          requires: [ cloudfront-update ] 
      

