version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Back-end build
          command: |
             echo "Version of npm : "
             npm -v
             

          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
            name: test-front-end
            command: |
                cd frontend
                npm install
                npm run test
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: sudo apt-get install curl
      - run:
           name: smoke test
           command: |
             URL="https://www.google.com/"
             # Test if website exists
             if curl -s --head ${URL} 
             then
               exit 0
             else
               exit 1
             fi            
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - run:
            command: |
              cd frontend
              npm install
              npm install oauth-sign@^0.9.0
              

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - run:
           command: |
              cd backend
              npm audit fix --audit-level=critical
              
  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=proj3 \
              --stack-name "your back-end stack with s3-kk1j287dhjppmz437-udacity" \
              --parameter-overrides ID="s3-kk1j287dhjppmz437-udacity"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=proj3 \
              --stack-name "your front-end stack name with s3-kk1j287dhjppmz437-udacity" \
              --parameter-overrides ID="s3-kk1j287dhjppmz437-udacity"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                echo [all] > inventory
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:proj3" \
                --output text >> inventory
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

workflows:
  default:
    jobs:
      -  deploy-infrastructure
      
