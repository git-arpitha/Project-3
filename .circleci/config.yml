version: 2.1

orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy   back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
                cd backend
                npm install -g aws-cli
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      - run:
          name: Destroy environments
          when: on_fail
          command: |
                cd backend
                npm install -g aws-cli
                aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
              
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test-frontend
          command: |
                cd frontend
                npm install
                npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend      
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: test-backend
          command: |
                cd backend
                npm install
                npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend 

  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
           keys: [scan-frontend]
       - run:
           name: scan-frontend
           command: |
               cd frontend
               npm install
               npm install oauth-sign@^0.9.0
       - save_cache:
           paths: [frontend/node_modules]
           key: scan-frontend           
 
              
  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
           keys: [scan-backend]
       - run:
           name: scan-backend
           command: |
                 cd backend
                 npm audit fix --audit-level=critical --force
       - save_cache:
           paths: [backend/node_modules]
           key: scan-backend  

  slack-deploy:
    docker:
      - image: circleci/node:13.8.0

    steps: 
      - checkout
      - run:
          command:  |
                 cd backend
                 npm install
                 npm run build
      - slack/notify:
          channel: C02NRG0H0F9
          event: always
          template: basic_fail_1     
    
  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=proj3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=proj3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
             
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                echo "[web]" > .circleci/ansible/inventory.txt
                eco "54.144.235.127" >>.circleci/ansible/inventory.txt
                aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:udacity" \
                  --output text >> inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
    #  - destroy-environment
    
  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
    steps:
        - checkout
        - add_ssh_keys:
                fingerprints: ["d7:fd:94:12:70:77:34:28:cf:cc:90:77:11:49:c9:2a"]
        - attach_workspace:
                at: ~/
        - run:
              name: Install dependencies
              command: |
                       apk add --no-cache \
                       python3 \
                       py3-pip \
                       && pip3 install --upgrade pip \
                       && pip3 install \
                       awscli \
                       && rm -rf /var/cache/apk/*
                       apk add --update ansible
        - run:
              name: Configure server
              command: |
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
                
      #  - destroy-environment       
        
  run-migrations:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Run migrations
            command: |
                cd backend
                npm install
                npm run build
                sudo apt-get -y -qq update
                sudo apt-get -y -qq install python3
                sudo apt-get -qq install awscli
        - run:
            name: envts
            working_directory: ./backend
            command: |
                touch .env
                echo ENVIROMENT=production > .env
                echo NODE_ENV=production >> ".env"
                echo TYPEORM_CONNECTION=postgres >> .env
                echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
                echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
                echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
                echo TYPEORM_HOST=$TYPEORM_HOST >> .env
                echo TYPEORM_PORT=$TYPEORM_PORT >> .env
                echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
                echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
                echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
                ls -latr
                cat .env
        - run:
            name: Run migrations
            working_directory: ./backend
            command: |
                 pwd
                 echo "HOST: " $TYPEORM_HOST
                 echo "PWD: " $(pwd)
                 echo $TYPEORM_DATABASE
                 npm install
                 npm run build
                 touch migrationresult.txt
                 npm run migrations:revert
                 npm run migrations >> migrationresult.txt
                 cat migrationresult.txt
        - run:
            name: Send migration results to memstash
            command: |
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                   curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                fi
      #  - destroy-environment           
workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
       #   requires: [build-frontend]
     # - test-backend:
      #    requires: [build-backend]
    #  - scan-backend:
     #     requires: [build-backend]
    #  - scan-frontend:
     #     requires: [build-frontend]
      #-  slack-deploy
     # - deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
     # - configure-infrastructure:
     #     requires: [deploy-infrastructure]
      - run-migrations
      #    requires: [configure-infrastructure]
      

